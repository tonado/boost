[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:depth_first_iterator `depth_first_iterator<Node,IsReverse>`]

[section Synopsis]
[reference__depth_first_iterator]
[endsect]

[section Description]
This iterator traverses the root node passed to its constructor--and all
its descendants--in depth-first fashion, e.g. given the following tree
representation:

``
      A
      |
  C---+---B
  |       |
+-+-+   +-+-+
|   |   |   |
D   E   F   G
``

By default, this iterator will traverse the tree nodes in the following order:

``
A  pre_order_traversal
C  pre_order_traversal
D  pre_order_traversal
D  post_order_traversal
E  pre_order_traversal
E  post_order_traversal
C  post_order_traversal
B  pre_order_traversal
F  pre_order_traversal
F  post_order_traversal
G  pre_order_traversal
G  post_order_traversal
B  post_order_traversal
A  post_order_traversal
``

The traversal state conversion operator of this iterator will yield each value
in the column on the right at the appropriate iteration.

This iterator can also be used to traverse the tree nodes in reverse:

``
A  post_order_traversal
B  post_order_traversal
G  post_order_traversal
G  pre_order_traversal
F  post_order_traversal
F  pre_order_traversal
B  pre_order_traversal
C  post_order_traversal
E  post_order_traversal
E  pre_order_traversal
D  post_order_traversal
D  pre_order_traversal
C  pre_order_traversal
A  pre_order_traversal
``

This iterator is ideal for algorithms that need to perform both preprocessing
and postprocessing of a tree node.
[endsect]

[section:definition Where defined]
``
#include <__depth_first_iterator__header__>
``

To register under __Boost_Typeof__:

``
#include <__depth_first_iterator__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Node`]
        [The type of a tree node.]
        [
            It must model the __Tree_Node__ concept, but it can be
            `const`-qualified.
        ]
        []
    ]
    [
        [`IsReverse`]
        [
            Configures the `depth_first_iterator` to traverse tree nodes in
            reverse depth-first fashion if equivalent to __mpl_true__;
            otherwise, the nodes will be traversed in depth-first fashion.
        ]
        [It must model the __Boolean_Integral_Constant__ concept.]
        [__mpl_false__]
    ]
]
[endsect]

[section:model_of Model of]
[itemized_list
    [__Full_Tree_Node_Iterator__]
    [__Bidirectional_Iterator__]
    [__Default_Constructible__]
    [__Copy_Constructible__]
    [__Assignable__]
]
[endsect]

[section Members]
[table
    [[Name][Expression][Description][Type requirements]]
    [
        [Value type]
        [``
            typedef ... value_type;
        ``]
        [Defined by the __Full_Tree_Node_Iterator__ concept.]
        []
    ]
    [
        [Reference type]
        [``
            typedef ... reference;
        ``]
        [Defined by the __Forward_Iterator__ concept.]
        []
    ]
    [
        [Pointer type]
        [``
            typedef ... pointer;
        ``]
        [Defined by the __Forward_Iterator__ concept.]
        []
    ]
    [
        [Distance type]
        [``
            typedef ... difference_type;
        ``]
        [Defined by the __Forward_Iterator__ concept.]
        []
    ]
    [
        [Iterator category]
        [``
            typedef ... iterator_category;
        ``]
        [Defined by the __Forward_Iterator__ concept.]
        []
    ]
    [
        [Default constructor]
        [``
            depth_first_iterator();
        ``]
        [
            Sets this iterator past-the-end.  Required by the
            __Default_Constructible__ concept.
        ]
        []
    ]
    [
        [Constructor from node]
        [``
            depth_first_iterator(Node&);
        ``]
        [Defined by the __Full_Tree_Node_Iterator__ concept.]
        []
    ]
    [
        [Conversion constructor]
        [``
            template <typename N, typename I>
            depth_first_iterator(depth_first_iterator<N,I> const&);
        ``]
        [
            Constructs this iterator as a copy of the specified one so that the
            current node is of type `Node`.
        ]
        [
            [^_tr1_is_convertible_<N,Node>] must evaluate to __tr1_true_type__,
            and [^_mpl_equal_to_<I,IsReverse>] must evaluate to __mpl_true__.
        ]
    ]
    [
        [Copy constructor]
        [``
            depth_first_iterator(depth_first_iterator const&);
        ``]
        [Defined by the __Copy_Constructible__ concept.]
        []
    ]
    [
        [Assignment operator]
        [``
            depth_first_iterator& operator=(depth_first_iterator const&);
        ``]
        [Defined by the __Assignable__ concept.]
        []
    ]
    [
        [Dereference operator]
        [``
            reference operator*() const;
        ``]
        [
            Returns the current node.  Required by the __Forward_Iterator__
            concept.
        ]
    ]
    [
        [Indirection operator]
        [``
            pointer operator->() const;
        ``]
        [
            Returns a pointer to the current node.  Required by the
            __Forward_Iterator__ concept.
        ]
        []
    ]
    [
        [Pre-increment operator]
        [``
            depth_first_iterator& operator++();
        ``]
        [
            If `IsReverse` evaluates to __mpl_true__, points this iterator to
            the next node in the reverse depth-first traversal of the tree
            whose root node was passed into the constructor; otherwise, points
            this iterator to the next node in the depth-first traversal of the
            tree whose root node was passed into the constructor.  Returns this
            iterator.  Required by the __Forward_Iterator__ concept.
        ]
        []
    ]
    [
        [Post-increment operator]
        [``
            depth_first_iterator operator++(int);
        ``]
        [
            If `IsReverse` evaluates to __mpl_true__, points this iterator to
            the next node in the reverse depth-first traversal of the tree
            whose root node was passed into the constructor; otherwise, points
            this iterator to the next node in the depth-first traversal of the
            tree whose root node was passed into the constructor.  Returns a
            new iterator pointing to the (previous) current node.  Required by
            the __Forward_Iterator__ concept.
        ]
        []
    ]
    [
        [Pre-decrement operator]
        [``
            depth_first_iterator& operator--();
        ``]
        [
            If `IsReverse` evaluates to __mpl_true__, points this iterator to
            the previous node in the reverse depth-first traversal of the tree
            whose root node was passed into the constructor; otherwise, points
            this iterator to the previous node in the depth-first traversal of
            the tree whose root node was passed into the constructor.  Returns
            this iterator.  Required by the __Bidirectional_Iterator__ concept.
        ]
        []
    ]
    [
        [Post-decrement operator]
        [``
            depth_first_iterator operator--(int);
        ``]
        [
            If `IsReverse` evaluates to __mpl_true__, points this iterator to
            the previous node in the reverse depth-first traversal of the tree
            whose root node was passed into the constructor; otherwise, points
            this iterator to the previous node in the depth-first traversal of
            the tree whose root node was passed into the constructor.  Returns
            a new iterator pointing to the (next) current node.  Required by
            the __Bidirectional_Iterator__ concept.
        ]
        []
    ]
    [
        [Traversal state conversion operator]
        [``
            operator _traversal_state_() const;
        ``]
        [Defined by the __Tree_Node_Iterator__ concept.]
        []
    ]
]
[endsect] [/ Members]

[section:non_members Non-members]
[table
    [[Name][Expression][Description]]
    [
        [Iterator creation]
        [[reference__make_depth_first_iterator]]
        [
            Constructs and returns a `depth_first_iterator` that will iterate
            through the specified node and its descendants.
        ]
    ]
    [
        [Reverse iterator creation]
        [[reference__make_depth_first_reverse_iterator]]
        [
            Constructs and returns a `depth_first_iterator` that will iterate
            through the specified node and its descendants in reverse order.
        ]
    ]
]
[endsect]

[endsect] [/ depth_first_iterator]

