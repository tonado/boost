[/=============================================================================
    Copyright (C) 2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:cartesian_sort `cartesian_sort()`]

[section Synopsis]
[reference__cartesian_sort]
[endsect]

[section Description]
The `cartesian_sort()` function sorts the elements in `[itr_begin, itr_end)`
into ascending order, meaning that if `i` and `j` are any two valid iterators
in `[itr_begin, itr_end)` such that `i` precedes `j`, then `*j` is not less
than `*i`.  The iterator type must fulfill the __Forward_Iterator__ concept,
and its value type must be mutable.

The `cartesian_sort()` function is not guaranteed to be stable.  That is, if
`*i` and `*j` are equivalent, meaning neither one is less than the other, then
it is not guaranteed that `cartesian_sort()` will preserve the relative order
of these two elements.

The first version compares objects using the __Strict_Weak_Ordering__ object
`compare`.  The second version compares objects using the less-than operator.
[endsect]

[section:definition Where defined]
``
#include <__cartesian_sort__header__>
``
[endsect]

[endsect] [/ cartesian_sort]

