[/=============================================================================
    Copyright (C) 2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:with_accumulation_base
    `with_accumulation_base<
        Derived
      , BaseGenerator
      , T1
      , T2
      , Key
      , Tag
      , IncludesAllDescendants
      , IncludesRoot
      , Value
    >`
]

[section Description]
The __tree_node_with_accumulation__ class template inherits its functionality
from this class template.  They differ only with regard to template parameters:
the __tree_node_with_accumulation__ class template is meant to be used directly
as a data structure, while `with_accumulation_base` is more suitable as a base
class template from which other __Tree_Node__ adaptor class templates can
derive via the __tree_node_with_accumulation_base_gen__
__Base_Type_Generator__.

[important
    Optional __Boost_Accumulators__ parameters are currently unsupported.  This
    may change once this data structure can detect the availability of
    __Boost_Parameter__ keywords used by __Boost_Accumulators__ features.
]

[important
    Weighted samples are currently unsupported.
]
[endsect]

[section:definition Where defined]
``
#include <__with_accumulation__header__>
``

Forward-declared:

``
#include <__with_accumulation__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__with_accumulation__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements]]
    [
        [`Derived`]
        [The most descendant type that will inherit from this one.]
        []
    ]
    [
        [`BaseGenerator`]
        [
            The __Base_Type_Generator__ from whose return type
            `with_accumulation_base` will inherit.
        ]
        []
    ]
    [
        [`T1`]
        [The key type if `T2` is not `void`; the user data type otherwise.]
        []
    ]
    [
        [`T2`]
        [The user data type if not `void`; ignored otherwise.]
        []
    ]
    [
        [`Key`]
        [
            The key type associated with the value on which this __Tree_Node__
            adaptor will perform statistical computations.
        ]
        [
            [^_has_key_<Key>(base)] must return `true` for some object `base`
            of the return type of `BaseGenerator`.
        ]
    ]
    [
        [`Tag`]
        [
            The type that determines what this __Tree_Node__ adaptor will
            compute.
        ]
        [It must be a valid __Boost_Accumulators__ feature.]
    ]
    [
        [`IncludesAllDescendants`]
        [
            A __Boolean_Integral_Constant__ that determines whether this
            __Tree_Node__ adaptor will involve all descendants (if set to
            __mpl_true__) or just the immediate children (if set to
            __mpl_false__) in its computations.
        ]
        []
    ]
    [
        [`IncludesRoot`]
        [
            A __Boolean_Integral_Constant__ that determines whether or not this
            __Tree_Node__ adaptor will include the value of the root node in
            its computations.
        ]
        []
    ]
    [
        [`Value`]
        [
            The type of the result of the computation performed by this
            __Tree_Node__ adaptor if specified; ignored if `void`.
        ]
        []
    ]
]
[endsect]

[section:model_of Model of]
[itemized_list
    [
        __Associative_Tree_Node__ if `T2` is specified;
        __Non_Associative_Tree_Node__ otherwise
    ]
    [__Base_Tree_Node__]
    [any other concept that the return type of `BaseGenerator` models]
]
[endsect]

[section:public_bases Public Base Classes]
[reference__with_accumulation_base__bases]
[endsect]

[section:members Members]
In addition to those inherited from the return type of `BaseGenerator`, the
following members are defined:

[table
    [[Name][Definition][Scope][Description]]
    [
        [Emplacement constructor]
        [[reference__with_accumulation_base__emplacement_ctor]]
        [`protected`]
        [Defined by the __Tree_Node__ concept.]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__with_accumulation_base__emplacement_ctor_w_allocator]]
        [`protected`]
        [Defined by the __Tree_Node__ concept.]
    ]
    [
        [Derived copy constructor]
        [[reference__with_accumulation_base__derived_copy_ctor]]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Derived copy constructor with allocator]
        [[reference__with_accumulation_base__derived_copy_ctor_w_allocator]]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Derived move constructor]
        [``
            with_accumulation_base(Derived&&);
        ``]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Derived move constructor with allocator]
        [``
            with_accumulation_base(
                Derived&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Accumulation member read-only access]
        [[reference__with_accumulation_base__key_value_operator]]
        [`public`]
        [
            Returns the accumulated value of the statistical computations
            performed by this __Tree_Node__ adaptor.
        ]
    ]
]
[endsect]

[section:non_members Non-members]
In addition to those inherited from the return type of `BaseGenerator`, the
following non-members are defined.

[table
    [[Name][Definition][Where defined]]
    [
        [Accumulation key-value read-only access]
        [[reference__with_accumulation_base__at_key]]
        [__Tree_Node__]
    ]
]
[endsect]

[section Example]
A GUI application that renders row numbers needs to know, in sublinear time,
which variable-height row numbers should be rendered on-screen.  Independently,
the application must also compute the minimum priority of each row number in
terms of its own priority and that of its sub-rows.

`GUITable` associates the example key types with the user data that our program
will need.  `HeightSumKey` is a template instantiation of __accumulation_key__
that will instruct the corresponding `with_accumulation_base` template
instantiation to store the sum of the `example_keys::row_height` values of a
node and its children, while `MinPriorityKey` is a template instantiation of
__accumulation_key__ that will instruct the corresponding
__tree_node_with_accumulation__ template instantiation to store the minimum of
the `example_keys::row_priority` values of a node and its children.

`GUIBinaryCompare` is a __Binary_Predicate__ model that implements two function
call operators.  The first one determines whether or not __binary_descendant__
should traverse the left branch; the second one determines whether or not the
algorithm should traverse the right branch.

[example__gui__types]

With the boilerplate code out of the way, we can define the `GUINode` data
structure.  The __binary_node_base_gen__ type induces `GUINode` to model the
__Binary_Tree_Node__ concept, while the __tree_node_with_accumulation__ and
`with_accumulation_base` template instantiations augment `GUINode` with the
values associated with `MinPriorityKey` and `HeightSumKey`, respectively.

[example__gui__binary_node__type]

The syntax for creating the root node and its descendants is no different for
the `GUINode` type than it is for [^_binary_node_<GUITable>].  The accumulation
values are calculated behind the scenes.

[example__gui__binary_node__build]

Using the __binary_descendant__ algorithm with `GUIBinaryCompare` enables the
application to find the row number that occupies the space a given number of
pixels from the top in logarithmic time.  A traversal through the nodes will
also reveal that the tree exhibits the heap-order property with respect to
`MinPriorityKey` values.

[example__gui__binary_node__test]

The complete program source can be found here:
<__example_type_definitions_hpp__> and <__test_binary_node_cpp__>
[endsect]

[endsect] [/ with_accumulation_base]

