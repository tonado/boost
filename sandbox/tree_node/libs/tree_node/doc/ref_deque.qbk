[/=============================================================================
    Copyright (C) 2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:deque `deque<T,NodeGenerator,Balancer>`]

[section Description]
The `deque` data structure is a __double_ended_queue__ whose programming
interface is very similar to that of __container_deque__ but whose performance
characteristics are significantly different: depending on the `Balancer` type
in use, it can be expanded or contracted at both ends in amortized logarithmic
time with respect to the number of elements, and any element can be accessed
by index in logarithmic time as well.  Though this worst-case performance is
not as good as the amortized constant time guaranteed by the corresponding
__container_deque__ operations, the trade-off may be acceptable because this
data structure also allows elements to be inserted to or removed from arbitrary
positions in amortized logarithmic time, which is much better than the linear
time of the corresponding __container_deque__ operations.
[endsect]

[section:definition Where defined]
``
#include <__deque__header__>
``

Forward-declared:

``
#include <__deque__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__deque__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`T`]
        [The value type.]
        []
    ]
    [
        [`NodeGenerator`]
        [
            A __Node_Type_Generator__ that takes in the value type and returns
            a __Binary_Tree_Node__ model.
        ]
        [__binary_node_default_gen__]
    ]
    [
        [`Balancer`]
        [TODO.]
        [__null_balancer__]
    ]
]
[endsect]

[section:model_of Model of]
[itemized_list
    [__Front_Insertion_Sequence__]
    [__Back_Insertion_Sequence__]
    [
        __Indexable_Container__ if the value associated with __count_key__
        exists for the return type of `NodeGenerator`
    ]
    [__Default_Constructible__ if `T` is __Default_Constructible__]
    [__Copy_Constructible__ if `T` is __Copy_Constructible__]
    [__Assignable__ if `T` is __Copy_Constructible__ and __Movable__]
    [__Movable__ if `T` is __Movable__]
]
[endsect]

[section:members Public Members]
[table
    [[Name][Definition][Description]]
    [
        [Value type]
        [[reference__deque__value_type]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Reference type]
        [[reference__deque__reference]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Reference-to-const type]
        [[reference__deque__const_reference]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Pointer type]
        [[reference__deque__pointer]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Pointer-to-const type]
        [[reference__deque__const_pointer]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Node type]
        [[reference__deque__node]]
        [The __Binary_Tree_Node__ model returned by `NodeGenerator`.]
    ]
    [
        [Iterator type]
        [[reference__deque__iterator]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Immutable iterator type]
        [[reference__deque__const_iterator]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Reverse iterator type]
        [[reference__deque__reverse_iterator]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [Immutable reverse iterator type]
        [[reference__deque__const_reverse_iterator]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [Size type]
        [[reference__deque__size_type]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Allocator type]
        [[reference__deque__allocator_type]]
        [
            The type of the allocator that this container uses to dynamically
            handle its storage needs.
        ]
    ]
    [
        [Default constructor, default fill constructor]
        [[reference__deque__default_fill_ctor]]
        [
            If `n` is left unspecified, constructs an empty `deque`, as defined
            by the __Default_Constructible__ concept; otherwise, constructs a
            `deque` containing `n` default-constructed elements, as defined by
            the __Sequence__ concept.
        ]
    ]
    [
        [Constructor with allocator]
        [[reference__deque__ctor_w_alloc]]
        [
            Constructs an empty `deque` that will use a copy of the specified
            allocator.
        ]
    ]
    [
        [Default fill constructor with allocator]
        [[reference__deque__default_fill_ctor_w_alloc]]
        [
            Constructs a `deque` containing `n` default-constructed elements
            and that will use a copy of the specified allocator.
        ]
    ]
    [
        [Fill constructor]
        [[reference__deque__fill_ctor]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Fill constructor with allocator]
        [[reference__deque__fill_ctor_w_alloc]]
        [
            Constructs a `deque` containing `n` copies of the specified element
            and that will use a copy of the specified allocator.
        ]
    ]
    [
        [Range constructor]
        [[reference__deque__range_ctor]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Range constructor with allocator]
        [[reference__deque__range_ctor_w_alloc]]
        [
            Constructs a `deque` containing a copy of the specified range and
            that will use a copy of the specified allocator.
        ]
    ]
    [
        [Copy constructor]
        [[reference__deque__copy_ctor]]
        [Defined by the __Copy_Constructible__ concept.]
    ]
    [
        [Copy constructor with allocator]
        [[reference__deque__copy_ctor_w_alloc]]
        [Copy-constructs a `deque` using the specified allocator.]
    ]
    [
        [Move constructor]
        [``
            deque(deque&& source);
        ``]
        [Defined by the __Movable__ concept.]
    ]
    [
        [Move constructor with allocator]
        [``
            deque(deque&& source, allocator_type const& allocator);
        ``]
        [Move-constructs a `deque` using the specified allocator.]
    ]
    [
        [Copy assignment operator]
        [[reference__deque__copy_assign]]
        [Defined by the __Assignable__ concept.]
    ]
    [
        [Move assignment operator]
        [``
            deque& operator=(deque&& source);
        ``]
        [Defined by the __Movable__ concept.]
    ]
    [
        [Destructor]
        [[reference__deque__dtor]]
        [
            Destroys the `deque`.  All stored values are destroyed and used
            memory is deallocated.
        ]
    ]
    [
        [Root node read-only access]
        [[reference__deque__data__const]]
        [
            Returns `nullptr` if the `deque` is empty, otherwise a pointer to
            a `node const` objet from which an __in_order_iterator__ can be
            constructed to traverse the underlying node of each element in the
            `deque`.
        ]
    ]
    [
        [Root node access]
        [[reference__deque__data]]
        [
            Returns `nullptr` if the `deque` is empty, otherwise a pointer to a
            `node` objet from which an __in_order_iterator__ can be constructed
            to traverse the underlying node of each element in the `deque`.
        ]
    ]
    [
        [Beginning of read-only range]
        [[reference__deque__cbegin]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Beginning of range]
        [[reference__deque__begin]]
        [Defined by the __Container__ concept.]
    ]
    [
        [End of read-only range]
        [[reference__deque__cend]]
        [Defined by the __Container__ concept.]
    ]
    [
        [End of range]
        [[reference__deque__end]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Beginning of read-only reverse range]
        [[reference__deque__crbegin]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [Beginning of reverse range]
        [[reference__deque__rbegin]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [End of read-only reverse range]
        [[reference__deque__crend]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [End of reverse range]
        [[reference__deque__rend]]
        [Defined by the __Reversible_Container__ concept.]
    ]
    [
        [Back read-only access]
        [[reference__deque__cback]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Back access]
        [[reference__deque__back]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Back insertion]
        [[reference__deque__push_back]]
        [Defined by the __Back_Insertion_Sequence__ concept.]
    ]
    [
        [Back move insertion]
        [``
            void push_back(value_type&& t);
        ``]
        [
            Constructs a new element at the back of the `deque` and moves the
            resources of `t` to this new element.
        ]
    ]
    [
        [Back emplacement]
        [[reference__deque__emplace_back]]
        [Defined by the __Back_Insertion_Sequence__ concept.]
    ]
    [
        [Back removal]
        [[reference__deque__pop_back]]
        [Defined by the __Back_Insertion_Sequence__ concept.]
    ]
    [
        [Front read-only access]
        [[reference__deque__cfront]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Front access]
        [[reference__deque__front]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Front insertion]
        [[reference__deque__push_front]]
        [Defined by the __Front_Insertion_Sequence__ concept.]
    ]
    [
        [Front move insertion]
        [``
            void push_front(value_type&& t);
        ``]
        [
            Constructs a new element at the front of the `deque` and moves the
            resources of `t` to this new element.
        ]
    ]
    [
        [Front emplacement]
        [[reference__deque__emplace_front]]
        [Defined by the __Front_Insertion_Sequence__ concept.]
    ]
    [
        [Front removal]
        [[reference__deque__pop_front]]
        [Defined by the __Front_Insertion_Sequence__ concept.]
    ]
    [
        [Insertion]
        [[reference__deque__insert]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Move insertion]
        [``
            iterator insert(const_iterator pos, value_type&& t);
        ``]
        [
            Constructs a new element at the specified position in the `deque`
            and moves the resources of `t` to this new element.
        ]
    ]
    [
        [Fill insertion]
        [[reference__deque__insert_fill]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Range insertion]
        [[reference__deque__insert_range]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Emplacement]
        [[reference__deque__emplace]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Erasure]
        [[reference__deque__erase]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Range erasure]
        [[reference__deque__erase_range]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Empty container query]
        [[reference__deque__empty]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Remove all elements]
        [[reference__deque__clear]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Content swap]
        [[reference__deque__swap_other]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Resizing]
        [[reference__deque__resize]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Resizing with element]
        [[reference__deque__resize_w_value]]
        [Defined by the __Sequence__ concept.]
    ]
    [
        [Size query]
        [[reference__deque__size]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Maximum size query]
        [[reference__deque__max_size]]
        [Defined by the __Container__ concept.]
    ]
    [
        [Element read-only access]
        [[reference__deque__index_operator__const]]
        [Defined by the __Indexable_Container__ concept.]
    ]
    [
        [Element access]
        [[reference__deque__index_operator]]
        [Defined by the __Indexable_Container__ concept.]
    ]
]
[endsect] [/ Members]

[section Test]
<__test_deque_cpp__>
[endsect]

[endsect] [/ deque]

