[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:associative_node_gen `associative_node_gen<Selector>`]

[section Synopsis]
[reference__associative_node_gen]
[endsect]

[section Description]
Minimalist selector that can be passed on to generic functions and/or data
structures that use __Associative_Tree_Node__ models.
[endsect]

[section:definition Where defined]
``
#include <__associative_node__header__>
``

To register under __Boost_Typeof__:

``
#include <__associative_node__typeof_header__>
``
[endsect]

[section:model_of Model of]
__Node_Type_Generator__
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Selector`]
        [
            The type that determines the child container type of
            __associative_node__.
        ]
        [[itemized_list
            [
                [^_is_recursive_selector_<Selector>] must evaluate to
                __mpl_true__.
            ]
            [
                [^_is_associative_selector_<Selector>] must evaluate to
                __mpl_true__.
            ]
        ]]
        [__ptr_mapS__]
    ]
]
[endsect]

[section:expressions Expression Semantics]
Let `Derived` be the type that will inherit from __associative_node_base__.

Let `Key` be the key type.

Let `Data` be the user data type.

Let `Selector` be a valid `associative_node_gen` template argument.

``
    typedef _mpl_apply_wrap2_<
        associative_node_gen<Selector>
      , Key
      , Data
    >::type r;
``

[*Return type:] [^_associative_node_<Key,Data,Selector>]

[endsect]

[section Complexity]
Compile time.
[endsect]

[endsect] [/ associative_node_gen]

